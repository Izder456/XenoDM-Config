#+TITLE: Iz's XenoDM Config
#+DESCRIPTION: Mainly for personal backups, but if you want 'em, use 'em.
#+KEYWORDS: org-mode, readme, OpenBSD, XenoDM, sh, ksh, xresources, izder
#+PROPERTY: header-args: :tangle ~/.dotfiles/XenoDM-Config :mkdirp t



#+BEGIN_HTML
<div align="left">
<img alt="GitHub Repo stars" src="https://img.shields.io/github/stars/izder456/XenoDM-Config?style=plastic">
<img alt="Lines of code" src="https://tokei.rs/b1/github/izder456/XenoDM-Config?category=code&style=plastic">
</div>
#+END_HTML

* DISCLAIMER

- I'm not responsible for any system breakage due to my code.

- If you're unsure, refer to [[LICENSE.txt][THE LICENSE]] to see how seriously I take this.

- /Use with *caution*/

-----

* Table of Contents :TOC_4:
- [[#disclaimer][DISCLAIMER]]
- [[#xresources][Xresources]]
- [[#xsetup_0][Xsetup_0]]
- [[#giveconsole][GiveConsole]]

* Xresources

#+BEGIN_SRC conf :tangle Xresources
!!
! Keybinds
!!

xlogin*login.translations: #override \
<Key>F1: set-session-argument(failsafe) finish-field()\n\
<Key>Left: move-backward-character()\n\
<Key>Right: move-forward-character()\n\
<Key>Home: move-to-begining()\n\
<Key>End: move-to-end()\n\
Ctrl<Key>KP_Enter: set-session-argument(failsafe) finish-field()\n\
<Key>KP_Enter: set-session-argument() finish-field()\n\
Ctrl<Key>Return: set-session-argument(failsafe) finish-field()\n\
<Key>Return: set-session-argument() finish-field()

! Motif Look & Fell
,*lookAndFeel: motif

!!
! Basic Colors
!!

,*.foreground: #fbf1c7
,*.Foreground: #fbf1c7
,*.background: #1d2021
,*.Background: #1d2021
,*.activeBackground: #32302f
,*.activeForeground: #d5c4a1
,*.cursorColor: #fbf1c7

!!
! Prompts
!!

! Strings
xlogin*greeting: XenoDM Login
xlogin*namePrompt: user=>
xlogin*passwdPrompt: pass=>
xlogin*fail: Login incorrect or forbidden

! Fontfaces
xlogin*greetFace:       FreeSerif-18:style=Bold Italic:dpi=96
xlogin*face:            FreeSerif-16:style=Regular:dpi=96
xlogin*promptFace:      Spleen-16:style=Regular:dpi=96
xlogin*failFace:        FreeSerif-12:style=Bold Italic:dpi=96

!!
! XConsole
!!

xconsole*font:      -*-spleen-*-*-*-*-16-*-*-*-*-*-*-*
xconsole*scrollBar: false
xconsole*borderWidth: 1 
xconsole*borderColor: #ebdbb2
xconsole*iconic:    true
xconsole*verbose:   true

!!
! XMessage
!!

xmessage*background: #1d2021
xmessage*foreground: #fbf1c7
xmessage.borderWidth: 1
xmessage*borderColor: #ebdbb2
xmessage*message.scrollHorizontal: Never
xmessage*message.scrollVertical: Never
xmessage*timeout: 0
xmessage*printValue: false
xmessage*font:      -*-spleen-*-*-*-*-12-*-*-*-*-*-*-*

!!
! XClock
!!

xclock*borderWidth: 1 
xclock*borderColor: #ebdbb2
xclock*majorColor: #fbf1c7
xclock*minorColor: #ebdbb2
xclock*hourColor: #a89984
xclock*minuteColor: #ebdbb2
xclock*secondColor: #8ec07c

!!
! XLogin
!!

! border/shadow
xlogin*borderWidth: 1
xlogin*borderColor: #d5c4a1

! Login Box
xlogin.Login.sepWidth: 1
xlogin.Login.frameWidth: 0
xlogin.Login.innerFramesWidth: 0
xlogin.Login.echoPasswd: true
xlogin.Login.hiColor: #665c54
xlogin.Login.shdColor: #282828
xlogin.Login.greetColor: #fe8019
xlogin.Login.failColor: #fb4934
xlogin.Login.promptColor: #fabd2f
xlogin.Login.cursorColor: #bdae93
xlogin.Login.inpColor: #ebdbb2
xlogin.Login.foreground: #32302f
xlogin.Login.background: #1d2021
xlogin*useShape: false

! Login Logo
xlogin*logoFileName: /etc/X11/xenodm/pixmaps/striped_srcerizder.xpm
xlogin*logoPadding: 10

!!
! Gruvbox Colors
!!

! Black + DarkGrey
,*color0:  #282828
,*color8:  #928374
! DarkRed + Red
,*color1:  #cc241d
,*color9:  #fb4934
! DarkGreen + Green
,*color2:  #98971a
,*color10: #b8bb26
! DarkYellow + Yellow
,*color3:  #d79921
,*color11: #fabd2f
! DarkBlue + Blue
,*color4:  #458588
,*color12: #83a598
! DarkMagenta + Magenta
,*color5:  #b16286
,*color13: #d3869b
! DarkCyan + Cyan
,*color6:  #689d6a
,*color14: #8ec07c
! LightGrey + White
,*color7:  #a89984
,*color15: #ebdbb2
#+END_SRC

* Xsetup_0

For the first display head

#+BEGIN_SRC shell :tangle Xsetup_0
#!/bin/ksh

# Define variables at the top for easy access
readonly XCLOCK_WIDTH=132
readonly XCLOCK_HEIGHT=132
readonly XCLOCK_YOFFSET=32
readonly XMESG_WIDTH=312
readonly XMESG_HEIGHT=64
readonly XMESG_YOFFSET=256
readonly XCONSOLE_WIDTH=512
readonly XCONSOLE_HEIGHT=112
readonly XCONSOLE_YOFFSET=672

# Set Prefix for commands used
prefix="/usr/X11R6"
exec_prefix="${prefix}"

# Function to get screen dimensions
function get_screen_dimension {
    typeset dimension=$(xrandr --current | grep '*' | uniq | awk '{print $1}')
    case $1 in
        0) echo "${dimension%x*}" ;;
        1) echo "${dimension#*x}" ;;
        ,*) echo "Invalid argument. Use 0 for width or 1 for height." ;;
    esac
}

# Function to load environment
function load_environment {
    set -A filees "$@"
    for file in "${files[@]}"; do
	[ -f "$file" ] && . "$file"
    done
}

# Function to load resources
function load_resources {
    set -A resources "$@"
    for resource in "${resources[@]}"; do
	[ -f "$resource" ] && xrdb -merge "$xresource"
    done
}

# Function to manage autostarts
function manage_autostarts {
    for process in "$@"; do
        process_name="${process% *}"
        if pgrep -x "$process_name" > /dev/null; then
            pkill "$process_name"
        fi
        eval "$process" &
    done
}

# Function to spawn client windows with organization
function spawn_client_windows {
    typeset app=$1
    typeset width=$2
    typeset height=$3
    typeset xpos=$4
    typeset yoffset=$5
    $app -geometry "${width}"x"${height}"+"${xpos}"+"${yoffset}" &
}

# Load in environment & resources
load_environment /etc/xprofile
load_resources /etc/X11/xenodm/Xresources

# Autostarts
manage_autostarts "xrandr --output default --dpi 96" \
                  "xset b on" \
                  "xset fp+ /usr/local/share/fonts/spleen" \
                  "/usr/local/bin/feh --bg-fill --randomize /usr/local/share/backgrounds"

# Grab the Screen Dimensions and save into globals
XWIDTH=$(get_screen_dimension 0)
XHEIGHT=$(get_screen_dimension 1)

# Calculate
XCONSOLE_XPOS=$((($XWIDTH - $XCONSOLE_WIDTH) / 2))
XCLOCK_XPOS=$((($XWIDTH - $XCLOCK_WIDTH) / 2))
XMESG_XPOS=$((($XWIDTH - $XMESG_WIDTH) / 2))

# Spawn client windows with organization
spawn_client_windows "xconsole" $XCONSOLE_WIDTH $XCONSOLE_HEIGHT $XCONSOLE_XPOS $XCONSOLE_YOFFSET
spawn_client_windows "xclock -render -sharp -update 1" $XCLOCK_WIDTH $XCLOCK_HEIGHT $XCLOCK_XPOS $XCLOCK_YOFFSET

# Menu Event Loop
(
    while true; do
        xmessage "System Menu" \
                 -buttons "SLEEP[]":20,"RESTART[]":21,"SHUTDOWN[]":22,"SCROT[]":23 "" \
                 -geometry ${XMESG_WIDTH}x${XMESG_HEIGHT}+${XMESG_XPOS}-${XMESG_YOFFSET}
        typeset action=$?
        logger "Xmessage said: $action"

        case ${ACTION} in
	    20) /usr/sbin/zzz ;;
	    21) xsetroot -cursor_name watch; /sbin/shutdown -r now ;;
	    22) xsetroot -cursor_name watch; /sbin/shutdown -p now ;;
	    23) /usr/local/bin/scrot \
		    -z -o -q 100 -Z 0 \
		    -F /tmp/xenodm.png; \
		logger "Took Screenshot at /tmp/xenodm.png" >/dev/console ;;
	    ,*) logger "XMessage said: WAITING" >/dev/console ;;
        esac

        if [ -z "$(pgrep -U root xconsole)" ]; then
            break;
        fi
    done
) &
#+END_SRC

* GiveConsole

#+BEGIN_SRC shell :tangle GiveConsole
#!/bin/ksh

# Set Prefix for commands used
prefix="/usr/X11R6"
exec_prefix="${prefix}"
prefix="/usr/X11R6"
exec_prefix="${prefix}"

# Kill XCLOCK, XMESSAGE, & XCONSOLE upon Session Load
pkill xclock
pkill xconsole
pkill xmessage

# Pass Ownership to the user
chown $USER:$GROUP /dev/console
if [ -c /dev/dri/card0 ]; then
    chown $USER:$GROUP /dev/dri/card0
fi
if [ -c /dev/dri/renderD128 ]; then
    chown $USER:$GROUP /dev/dri/renderD128
fi

# Register Session to the user
${exec_prefix}/bin/sessreg -a -l $DISPLAY -u none $USER
#+END_SRC
